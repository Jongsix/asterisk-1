#------------------------------------------------------------------------------
#
#  WARNING !
#
#  This is a generated file. DO NOT EDIT THIS FILE! Your changes will
#  be lost the next time this file is regenerated.
#
#  This file was generated using ctiapps/asterisk crystal shard from the
#  Asterisk PBX version 16.5.0.
#
#------------------------------------------------------------------------------

module Asterisk
  class ARI
    class Applications < Resource
      # List all applications.
      def self.list : Array(Applications::Application)
        client.get "/applications"
      end

      # Get details of an application.
      #
      # Arguments:
      # - `application_name` - application's name.
      #   - Required: true,
      #   - Allow multiple (comma-separated list): false,
      #   ARI (http-client) related:
      #   - http request type: path,
      #   - param name: applicationName,
      #   - endpoint (get): /applications/{applicationName}
      #
      # Error responses:
      # - 404 - Application does not exist.
      def self.get(application_name : String) : Applications::Application
        response = client.get "/applications/#{application_name}"
      end

      # Subscribe an application to a event source.
      #
      # Arguments:
      # - `application_name` - application's name.
      #   - Required: true,
      #   - Allow multiple (comma-separated list): false,
      #   ARI (http-client) related:
      #   - http request type: path,
      #   - param name: applicationName,
      #
      # - `event_source` - uRI for event source (channel:{channelId}, bridge:{bridgeId}, endpoint:{tech}[/{resource}], deviceState:{deviceName}.
      #   - Required: true,
      #   - Allow multiple (comma-separated list): true,
      #   ARI (http-client) related:
      #   - http request type: query,
      #   - param name: eventSource,
      #   - endpoint (post): /applications/{applicationName}/subscription
      #
      # Error responses:
      # - 400 - Missing parameter.
      # - 404 - Application does not exist.
      # - 422 - Event source does not exist.
      def self.subscribe(application_name : String, event_source : String) : Applications::Application
        params = HTTP::Params.encode({"eventSource" => event_source})
        response = client.post "/applications/#{application_name}/subscription?" + params
      end

      # Unsubscribe an application from an event source.
      #
      # Arguments:
      # - `application_name` - application's name.
      #   - Required: true,
      #   - Allow multiple (comma-separated list): false,
      #   ARI (http-client) related:
      #   - http request type: path,
      #   - param name: applicationName,
      #
      # - `event_source` - uRI for event source (channel:{channelId}, bridge:{bridgeId}, endpoint:{tech}[/{resource}], deviceState:{deviceName}.
      #   - Required: true,
      #   - Allow multiple (comma-separated list): true,
      #   ARI (http-client) related:
      #   - http request type: query,
      #   - param name: eventSource,
      #   - endpoint (delete): /applications/{applicationName}/subscription
      #
      # Error responses:
      # - 400 - Missing parameter; event source scheme not recognized.
      # - 404 - Application does not exist.
      # - 409 - Application not subscribed to event source.
      # - 422 - Event source does not exist.
      def self.unsubscribe(application_name : String, event_source : String) : Applications::Application
        params = HTTP::Params.encode({"eventSource" => event_source})
        response = client.delete "/applications/#{application_name}/subscription?" + params
      end

      # Filter application events types.
      #
      # Arguments:
      # - `application_name` - application's name.
      #   - Required: true,
      #   - Allow multiple (comma-separated list): false,
      #   ARI (http-client) related:
      #   - http request type: path,
      #   - param name: applicationName,
      #
      # - `filter` - specify which event types to allow/disallow.
      #   - Required: false,
      #   - Allow multiple (comma-separated list): false,
      #   ARI (http-client) related:
      #   - http request type: body,
      #   - param name: filter,
      #   - endpoint (put): /applications/{applicationName}/eventFilter
      #
      # Error responses:
      # - 400 - Bad request.
      # - 404 - Application does not exist.
      def self.filter(application_name : String, filter : Hash(String, String | Bool | Int32 | Float32)? = nil) : Applications::Application
        response = client.put "/applications/#{application_name}/eventFilter",
  body: filter.to_json
      end
    end
  end
end
