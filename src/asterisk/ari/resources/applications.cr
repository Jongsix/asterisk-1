# ------------------------------------------------------------------------------
#
#  WARNING !
#
#  This is a generated file. DO NOT EDIT THIS FILE! Your changes will
#  be lost the next time this file is regenerated.
#
#  This file was generated using ctiapps/asterisk crystal shard from the
#  Asterisk PBX version 16.6.0.
#
# ------------------------------------------------------------------------------

module Asterisk
  class ARI
    class Applications < Resources
      # List all applications.
      def list : HTTP::Client::Response | Array(Applications::Application)
        format_response ari.get("applications"), Array(Applications::Application)
      end

      # Get details of an application.
      #
      # Arguments:
      # - `application_name` - application's name. (required);
      #
      # Error responses:
      # - 404 - Application does not exist.
      def get(application_name : String) : HTTP::Client::Response | Applications::Application
        format_response ari.get("applications/#{application_name}"), Applications::Application
      end

      # Subscribe an application to a event source.
      #
      # Arguments:
      # - `application_name` - application's name. (required);
      # - `event_source` - uRI for event source (channel:{channelId}, bridge:{bridgeId}, endpoint:{tech}[/{resource}], deviceState:{deviceName}. (required). Allow multiple instances (comma-separated list);
      #
      # Error responses:
      # - 400 - Missing parameter.
      # - 404 - Application does not exist.
      # - 422 - Event source does not exist.
      def subscribe(application_name : String, event_source : String) : HTTP::Client::Response | Applications::Application
        params = HTTP::Params.encode({"eventSource" => event_source})
        request = "applications/#{application_name}/subscription?" + params
        format_response ari.post(request), Applications::Application
      end

      # Unsubscribe an application from an event source.
      #
      # Arguments:
      # - `application_name` - application's name. (required);
      # - `event_source` - uRI for event source (channel:{channelId}, bridge:{bridgeId}, endpoint:{tech}[/{resource}], deviceState:{deviceName}. (required). Allow multiple instances (comma-separated list);
      #
      # Error responses:
      # - 400 - Missing parameter; event source scheme not recognized.
      # - 404 - Application does not exist.
      # - 409 - Application not subscribed to event source.
      # - 422 - Event source does not exist.
      def unsubscribe(application_name : String, event_source : String) : HTTP::Client::Response | Applications::Application
        params = HTTP::Params.encode({"eventSource" => event_source})
        request = "applications/#{application_name}/subscription?" + params
        format_response ari.delete(request), Applications::Application
      end

      # Filter application events types.
      #
      # Arguments:
      # - `application_name` - application's name. (required);
      # - `filter` - specify which event types to allow/disallow;
      #
      # Error responses:
      # - 400 - Bad request.
      # - 404 - Application does not exist.
      def filter(application_name : String, filter : Hash(String, String | Bool | Int32 | Float32)? = nil) : HTTP::Client::Response | Applications::Application
        format_response ari.put("applications/#{application_name}/eventFilter", body: filter.to_json), Applications::Application
      end
    end
  end
end
