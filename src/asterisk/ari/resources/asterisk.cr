#------------------------------------------------------------------------------
#
#  WARNING !
#
#  This is a generated file. DO NOT EDIT THIS FILE! Your changes will
#  be lost the next time this file is regenerated.
#
#  This file was generated using ctiapps/asterisk crystal shard from the
#  Asterisk PBX version 16.6.0.
#
#------------------------------------------------------------------------------

module Asterisk
  class ARI
    class Asterisk < Resources
      # Retrieve a dynamic configuration object.
      #
      # Arguments:
      # - `config_class` - the configuration class containing dynamic configuration objects. (required);
      # - `object_type` - the type of configuration object to retrieve. (required);
      # - `id` - the unique identifier of the object to retrieve. (required);
      #
      # Error responses:
      # - 404 - {configClass|objectType|id} not found
      def get_object(config_class : String, object_type : String, id : String) : HTTP::Client::Response | Array(Asterisk::ConfigTuple)
        format_response ari.get("asterisk/config/dynamic/#{config_class}/#{object_type}/#{id}")
      end

      # Create or update a dynamic configuration object.
      #
      # Arguments:
      # - `config_class` - the configuration class containing dynamic configuration objects. (required);
      # - `object_type` - the type of configuration object to create or update. (required);
      # - `id` - the unique identifier of the object to create or update. (required);
      # - `fields` - the body object should have a value that is a list of ConfigTuples, which provide the fields to update. Ex. [ { "attribute": "directmedia", "value": "false" } ];
      #
      # Error responses:
      # - 400 - Bad request body
      # - 403 - Could not create or update object
      # - 404 - {configClass|objectType} not found
      def update_object(config_class : String, object_type : String, id : String, fields : Hash(String, String | Bool | Int32 | Float32)? = nil) : HTTP::Client::Response | Array(Asterisk::ConfigTuple)
        format_response ari.put("asterisk/config/dynamic/#{config_class}/#{object_type}/#{id}", body: fields.to_json)
      end

      # Delete a dynamic configuration object.
      #
      # Arguments:
      # - `config_class` - the configuration class containing dynamic configuration objects. (required);
      # - `object_type` - the type of configuration object to delete. (required);
      # - `id` - the unique identifier of the object to delete. (required);
      #
      # Error responses:
      # - 403 - Could not delete object
      # - 404 - {configClass|objectType|id} not found
      def delete_object(config_class : String, object_type : String, id : String)
        ari.delete "asterisk/config/dynamic/#{config_class}/#{object_type}/#{id}"
      end

      # Gets Asterisk system information.
      #
      # Arguments:
      # - `only` - filter information returned.. Allow multiple instances (comma-separated list);
      def get_info(only : String? = nil) : HTTP::Client::Response | Asterisk::AsteriskInfo
        # Optional parameters
        params = HTTP::Params.encode({} of String => String)
        params += "&" + HTTP::Params.encode({"only" => only}) if only

        request = "asterisk/info?" + params
        format_response ari.get(request)
      end

      # Response pong message.
      def ping : HTTP::Client::Response | Asterisk::AsteriskPing
        format_response ari.get("asterisk/ping")
      end

      # List Asterisk modules.
      def list_modules : HTTP::Client::Response | Array(Asterisk::Module)
        format_response ari.get("asterisk/modules")
      end

      # Get Asterisk module information.
      #
      # Arguments:
      # - `module_name` - module's name. (required);
      #
      # Error responses:
      # - 404 - Module could not be found in running modules.
      # - 409 - Module information could not be retrieved.
      def get_module(module_name : String) : HTTP::Client::Response | Asterisk::Module
        format_response ari.get("asterisk/modules/#{module_name}")
      end

      # Load an Asterisk module.
      #
      # Arguments:
      # - `module_name` - module's name. (required);
      #
      # Error responses:
      # - 409 - Module could not be loaded.
      def load_module(module_name : String)
        ari.post "asterisk/modules/#{module_name}"
      end

      # Unload an Asterisk module.
      #
      # Arguments:
      # - `module_name` - module's name. (required);
      #
      # Error responses:
      # - 404 - Module not found in running modules.
      # - 409 - Module could not be unloaded.
      def unload_module(module_name : String)
        ari.delete "asterisk/modules/#{module_name}"
      end

      # Reload an Asterisk module.
      #
      # Arguments:
      # - `module_name` - module's name. (required);
      #
      # Error responses:
      # - 404 - Module not found in running modules.
      # - 409 - Module could not be reloaded.
      def reload_module(module_name : String)
        ari.put "asterisk/modules/#{module_name}"
      end

      # Gets Asterisk log channel information.
      def list_log_channels : HTTP::Client::Response | Array(Asterisk::LogChannel)
        format_response ari.get("asterisk/logging")
      end

      # Adds a log channel.
      #
      # Arguments:
      # - `log_channel_name` - the log channel to add. (required);
      # - `configuration` - levels of the log channel. (required);
      #
      # Error responses:
      # - 400 - Bad request body
      # - 409 - Log channel could not be created.
      def add_log(log_channel_name : String, configuration : String)
        params = HTTP::Params.encode({"configuration" => configuration})
        ari.post "asterisk/logging/#{log_channel_name}?" + params
      end

      # Deletes a log channel.
      #
      # Arguments:
      # - `log_channel_name` - log channels name. (required);
      #
      # Error responses:
      # - 404 - Log channel does not exist.
      def delete_log(log_channel_name : String)
        ari.delete "asterisk/logging/#{log_channel_name}"
      end

      # Rotates a log channel.
      #
      # Arguments:
      # - `log_channel_name` - log channel's name. (required);
      #
      # Error responses:
      # - 404 - Log channel does not exist.
      def rotate_log(log_channel_name : String)
        ari.put "asterisk/logging/#{log_channel_name}/rotate"
      end

      # Get the value of a global variable.
      #
      # Arguments:
      # - `variable` - the variable to get. (required);
      #
      # Error responses:
      # - 400 - Missing variable parameter.
      def get_global_var(variable : String) : HTTP::Client::Response | Asterisk::Variable
        params = HTTP::Params.encode({"variable" => variable})
        request = "asterisk/variable?" + params
        format_response ari.get(request)
      end

      # Set the value of a global variable.
      #
      # Arguments:
      # - `variable` - the variable to set. (required);
      # - `value` - the value to set the variable to;
      #
      # Error responses:
      # - 400 - Missing variable parameter.
      def set_global_var(variable : String, value : String? = nil)
        params = HTTP::Params.encode({"variable" => variable})

        # Optional parameters
        params += "&" + HTTP::Params.encode({"value" => value}) if value

        ari.post "asterisk/variable?" + params
      end
    end
  end
end
