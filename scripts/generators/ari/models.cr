module Asterisk
  module Generator
    class ARI
      class Models
        getter api_data : JSON::Any
        getter! models : JSON::Any?

        private def filename(resource_name, model_name)
          base_url = "%{root_dir}/src/asterisk/ari/models/%{resource_name}_%{model_name}.cr"
          base_url % {
            root_dir:      Asterisk::Generator.current_dir,
            resource_name: resource_name.underscore,
            model_name:    model_name.underscore
          }
        end

        def initialize(@api_data : JSON::Any)
          resource = api_data["resourcePath"].to_s.split("/").last.split(".").first.camelcase
          return if resource == "Events"
          @models = @api_data.as_h["models"]?
          return unless models?
          models.as_h.each do |model_name, model_data|
            # resource = api_data["apis"].as_a.first["path"].to_s.split("/").last.camelcase
            klass = model_name.camelcase
            klass_description = model_data["description"]?.try &.to_s.gsub(/^/m, "# ")

            parameters = Parameters.new model_data["properties"]

            model = <<-END
                    #------------------------------------------------------------------------------
                    #
                    #  WARNING !
                    #
                    #  This is a generated file. DO NOT EDIT THIS FILE! Your changes will
                    #  be lost the next time this file is regenerated.
                    #
                    #  This file was generated using ctiapps/asterisk crystal shard from the
                    #  Asterisk PBX version #{`asterisk -rx "core show version"`.split[1]}.
                    #
                    #------------------------------------------------------------------------------

                    module Asterisk
                      class ARI
                        class #{resource} < Resource
                          #{klass_description ? "#{klass_description}" : ""}
                          struct #{klass}
                            include JSON::Serializable

                            @[JSON::Field(ignore: true)]
                            property client : ARI? = nil

                            #{parameters.struct_properties.chomp.gsub(/ +$/, "").chomp}
                          end
                        end
                      end
                    end
                    END

            model = model.gsub(/ +$/m, "").gsub("\n\n\n", "\n\n").strip.chomp
            file = File.open(filename(resource, klass), "w")
            file.puts model
            file.close
          end
        end
      end
    end
  end
end
