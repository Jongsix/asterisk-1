module Asterisk
  module Generator
    class ARI
      class Resource
        getter api_data : JSON::Any
        getter header   : String
        getter footer   : String = "      end\n  end\nend"

        def initialize(@api_data : JSON::Any)
          klass = api_data["apis"].as_a.first["path"].to_s.split("/").last.camelcase
          @header = <<-END
                  #------------------------------------------------------------------------------
                  #
                  #  WARNING !
                  #
                  #  This is a generated file. DO NOT EDIT THIS FILE! Your changes will
                  #  be lost the next time this file is regenerated.
                  #
                  #  This file was generated using ctiapps/asterisk crystal shard from the
                  #  Asterisk PBX version #{`asterisk -rx "core show version"`.split[1]}.
                  #
                  #------------------------------------------------------------------------------

                  module Asterisk
                    class ARI
                      class #{klass} < Resource
                  END
          puts header
          generate_methods
          puts footer
        end

        def generate_methods
          #   [{"path" => "/channels",
          # path" => "/channels/{channelId}/answer",
          api_data["apis"].as_a.each do |methods|
            # next unless methods["path"].to_s =~ /answer$/i
            # pp methods if methods["path"].to_s =~ /answer$/i
            description = methods["description"]?
            methods["operations"].as_a.each do |method|
              summary = method["summary"]? || description

              http_method = method["httpMethod"].to_s.downcase

              response_class = if method["responseClass"].to_s =~ /^List\[(\w+)\]$/
                "Array(#{$1})"
              else
                method["responseClass"].to_s
              end

              arguments = if method["parameters"]?
                p = Parameters.new method["parameters"]
                p.arguments
              else
                ""
              end

              name = method["nickname"].to_s.underscore
              name = %(#{methods["path"].to_s =~ /\/\S+\/{(\S+)}\/\S+/ ? "" : "self."}#{name}#{arguments.empty? ? "" : "(#{arguments})"}#{response_class =~ /void/i ? "" : " : #{response_class}"})
              puts <<-END
                          # #{summary}
                          #
                          # ARI #{http_method} resource: #{methods["path"]}
                          def #{name}
                            # some-logic
                          end


                  END
            end
          end
        end

      end
    end
  end
end
